diff -ru ../quex-0.34.1/quex/code_base/template/buffer_access.i ./quex/code_base/template/buffer_access.i
--- ../quex-0.34.1/quex/code_base/template/buffer_access.i	2008-11-16 16:26:04.000000000 -0500
+++ ./quex/code_base/template/buffer_access.i	2008-12-20 15:34:42.000000000 -0500
@@ -74,13 +74,13 @@
     inline QUEX_CHARACTER_TYPE*  CLASS::buffer_end()
     { return QuexBuffer_content_back(&this->buffer) + 1; }
     
-    inline const size_t          CLASS::buffer_size()
+    inline size_t          CLASS::buffer_size()
     { return QuexBuffer_content_size(&this->buffer); }
 
     inline QUEX_CHARACTER_TYPE*  CLASS::buffer_text_end()
     { return QuexBuffer_text_end(&this->buffer); }
 
-    inline const size_t          
+    inline size_t          
     CLASS::buffer_distance_to_text_end()
     { return QuexBuffer_distance_input_to_text_end(&this->buffer); }
 
diff -ru ../quex-0.34.1/quex/code_base/template/lexical_analyzer_class ./quex/code_base/template/lexical_analyzer_class
--- ../quex-0.34.1/quex/code_base/template/lexical_analyzer_class	2008-11-16 16:24:29.000000000 -0500
+++ ./quex/code_base/template/lexical_analyzer_class	2008-12-20 14:55:47.000000000 -0500
@@ -293,9 +293,9 @@
         void                  buffer_prepare(const size_t CharacterN);
         QUEX_CHARACTER_TYPE*  buffer_begin();
         QUEX_CHARACTER_TYPE*  buffer_end();
-        const size_t          buffer_size();
+        size_t          buffer_size();
         QUEX_CHARACTER_TYPE*  buffer_text_end();
-        const size_t          buffer_distance_to_text_end();
+        size_t          buffer_distance_to_text_end();
         
         //
         // -- token stream: read next token
@@ -310,7 +310,7 @@
         //
         //     -- modes: read access
         QuexMode&     mode();
-        const int     mode_id() const;
+        int     mode_id() const;
         const char*   mode_name() const;
         //
         //     -- modes: changing lexical analysis mode
@@ -328,7 +328,7 @@
         //
         //     -- map: mode id to mode and vice versa
         QuexMode&   map_mode_id_to_mode(const int        ModeID);       
-        const int   map_mode_to_mode_id(const QuexMode& Mode) const;
+        int   map_mode_to_mode_id(const QuexMode& Mode) const;
 
         // (*) Token sending
         void        send(); /* empty function, for uniformity (see token sending via singleton) */
@@ -422,7 +422,7 @@
         IncludeStack       include_stack;
 #       endif 
         //      -- include events (a file is included)
-        void virtual on_include(const char* Filename) {}
+        void virtual on_include(const char* ) {}
         void virtual on_include_exit() {}
 
 #       ifdef QUEX_OPTION_STRING_ACCUMULATOR
diff -ru ../quex-0.34.1/quex/code_base/template/mode_handling.i ./quex/code_base/template/mode_handling.i
--- ../quex-0.34.1/quex/code_base/template/mode_handling.i	2008-10-03 03:00:32.000000000 -0400
+++ ./quex/code_base/template/mode_handling.i	2008-12-20 15:34:24.000000000 -0500
@@ -4,7 +4,7 @@
 CLASS::mode() 
 { return *__current_mode_p; }
 
-inline const int
+inline int
 CLASS::mode_id() const
 { return __current_mode_p->id; }
 
@@ -97,7 +97,7 @@
     return *(mode_db[ModeID]); 
 }
 
-inline const int  
+inline int  
 CLASS::map_mode_to_mode_id(const QuexMode& Mode) const
 { return Mode.id; }
 }
