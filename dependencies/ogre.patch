Index: PlugIns/CgProgramManager/src/OgreCgProgram.cpp
===================================================================
--- PlugIns/CgProgramManager/src/OgreCgProgram.cpp	(revision 9952)
+++ PlugIns/CgProgramManager/src/OgreCgProgram.cpp	(working copy)
@@ -63,7 +63,7 @@
     {
         StringVector args;
         if (!mCompileArgs.empty())
-            args = StringUtil::split(mCompileArgs);
+            args = StringUtil::splitExceptQuotes(mCompileArgs);
 
         StringVector::const_iterator i;
         if (mSelectedCgProfile == CG_PROFILE_VS_1_1)
Index: OgreMain/include/OgreString.h
===================================================================
--- OgreMain/include/OgreString.h	(revision 9952)
+++ OgreMain/include/OgreString.h	(working copy)
@@ -95,6 +95,16 @@
         */
 		static vector< String >::type split( const String& str, const String& delims = "\t\n ", unsigned int maxSplits = 0);
 
+        /** Returns a StringVector that contains all the substrings delimited
+            by the characters in the passed <code>delims</code> argument.  This version will not split delimiters that are inside quotes.
+            @param
+                delims A list of delimiter characters to split by
+            @param
+                maxSplits The maximum number of splits to perform (0 for unlimited splits). If this
+                parameters is > 0, the splitting process will stop after this many splits, left to right.
+        */
+		static vector< String >::type splitExceptQuotes( const String& str, const String& delims = "\t\n ", unsigned int maxSplits = 0);
+
 		/** Returns a StringVector that contains all the substrings delimited
             by the characters in the passed <code>delims</code> argument, 
 			or in the <code>doubleDelims</code> argument, which is used to include (normal) 
Index: OgreMain/src/OgreString.cpp
===================================================================
--- OgreMain/src/OgreString.cpp	(revision 9952)
+++ OgreMain/src/OgreString.cpp	(working copy)
@@ -109,6 +109,33 @@
 
         return ret;
     }
+    vector<String>::type StringUtil::splitExceptQuotes( const String& str, const String& delims, unsigned int maxSplits)
+    {
+        vector<String>::type ret;
+        // Pre-allocate some space for performance
+        ret.reserve(maxSplits ? maxSplits+1 : 10);    // 10 is guessed capacity for most case
+
+        unsigned int numSplits = 0;
+
+        ret.push_back(String());
+        String *current = &ret[numSplits];
+        bool in_quotes = false;
+        for (size_t i=0 ; i<str.length() ; ++i) {
+            char c = str[i];
+            if (c=='\"') {
+                in_quotes = !in_quotes;
+                continue;
+            }
+            if (in_quotes || delims.find(c)==String::npos || (maxSplits && numSplits == maxSplits)) {
+                current->append(1,c);
+                continue;
+            }
+            ret.push_back(String());
+            current = &ret[++numSplits];
+        }
+
+        return ret;
+    }
 	//-----------------------------------------------------------------------
 	vector< String >::type StringUtil::tokenise( const String& str, const String& singleDelims, const String& doubleDelims, unsigned int maxSplits)
 	{
